基本数据类型  和操作符

public class Course0508 {
	int field;
	static int staticField;
									方法名(method)
	public ststic void method(int paraml, int param2) {
		int variable1;
		int cariable2;
	}
}

四种变量：1.属性（field）| 实例变量 	2.静态属性（static field）| 类变量 （class variable）
			3.局部变量（local variable）	4.参数（parameter）
			
如何定义变量
数据类型 变量名（identifier）
		1.直接加分号； 	定义了变量，并且没有初始化
		2. = value；	定义了变量，并且进行了初始化
	int a；//没有初始化
	int a = 100;//初始化
	
命名变量名（包括类名、方法名）一些规则
1.必须以字母或者下划线_ 或者 美元符 $ 开头
			包括中文都可以
2.之后的部分可以是字母、下划线、美元符以及数字
3.变量名的长度是可以无限长的
4.变量名不可以和Java的关键字冲突
5.大小写敏感的	int java; 	int Java；	两个不同


命名的规范：
1.永远不要用美元符和下划线命名（下划线有个特例）
2.永远使用有意义的名字作为变量名，包括缩写
3.不要用中文以及拼音命名
4.	类名称		单个单词的首字母都大写的形式	class HelloWorldApp
	方法名称	单个单词，除第一个单词外，首字母大写	int helloWorldApp;
	变量名称	
	常量（不可修改）	每个字母都大写，用下划线分割	final int COUNT_OF_COURSES = 100;
5.类名称 和 变量名称 	大概是个名字
	方法名称			大概是个动词
	对象：1.状态（属性）	2.行为（方法）

数据类型
1.基本数据类型（primitive data type）
	1）数值类型
		1.整型	byte	short	int	long
		2.浮点型	float	double
	2）布尔类型		真/假	true/false
	3）字符类型		char
2.引用数据类型（reference data type）

数值类型		存储空间大小		取值范围			默认值
boolean				1位				true/false
char				2个字节			0x0000-0xFFFF		'\u0000'
byte				1个字节			没有无符号一说
short				2个字节
int					4个字节
long				8个字节
float				4个字节			IEEE 745标准
double				8个字节	

char类型里保存的不是一个ASCII编码，而是Unicode 编码
ASCII 				和 			Unicode 			是字符编码标准
7位表示（编码128个字符）	31位(用2个字节够存常用字了，不常用字也可以用2个字节麻烦的表示)
统一认准UTF-8

字面量(Literal)
int a = 10;		(int型的字面量)
1.整形的字面量 100	(int)	(100L) (100l)	默认（long）
			进制	
			十进制		100		100L
			十六进制	0xFF	0xFFL
			二进制		0b1010	ob101L	(binary)
			
100（int型的字面量）	bite a = 100;	bite b = 233;(报错)
						100L(long型的字面量)	int a = 100L;(报错)
2.浮点型的字面量
	1.0	(double)
	1.0F 1.0f	(float)
	doutble a = 1.0F;	//没问题
	float b = 1.0;		//有问题，不允许
科学表示法
	double a = 1E3;
里氏转换原则
	需要一个大范围的变量，放一个小范围的变量是自然而且允许
强制类型转换(type cast)
	long a = 100L;
	int b = (int)a;
int a = 100_0000_0000_0000;(_是允许的)
int a = 2_________2;
boolean		字面量		true/false
char 以及 String类型
字符		字符串

char c = '中';
char c = '\u4e2d';//用Unicode转义序列
String s = "中国";	//用双引号
char 的转义字符	\n	\t	\b
Sting 的加法运算
String a = "我爱";	String b = "中国";	a + b结果 我爱中国
public static void add(int a, int b) {
	System.out.println("a + b 的结果是 " + a + b);
	"a + b 的结果是1" + b
	"a + b 的结果是11"
	
	System.out.println("a + b 的结果是 " + (a + b));
}


运算符
赋值运算符=		初始化 修改值
		final int a = 100;	//a 的只不能被修改
		a = 30; //编译出错
算术运算符  +-*/ %
一元运算符	++ -- + +10 -10	!逻辑取反
	int a = 100;	a++ ;	的值100；	a 的值变成101
	逻辑取反只能用于 boolean 类型
		int a = 10;		!a;//C语言合法， Java不合法
比较运算符	== != <  >  <=  >=
条件运算符	&& || ?:
		条件(只允许boolean类型)？结果1：结果2
		凡是用到逻辑运算的地方，必须用boolean类型
	短路特性
		条件1 && 条件2		如果条件1的结果 是假(false) 不需要计算后面
		条件1 || 条件2		如果条件1的结果 是真(true)	不需要计算后面
位运算符	~ &  | ^
	int a = 0b1111;		~b == 0b0000;
位移运算符	<< >> >>>
	>> 和 >>> 的区别：>>带符号右移	>>>不带符号右移※※※
instanceof	类型判断运算符
对象	instanceof 类型（类） == true | false


double a = 1.1;
double b = 1.1;
if(a == b)	这么写不可以,会丢失精度
if(a - b < 0.00001 && a - b > -0.00001) 这是正确写法

char 两个字节的整数 65535数字特别重要
表示字符的规则Unicode(和ASCII是并列的关系)

java对于类型的校验比C语言更严格
java认为short和char是两种互不相干的类型，更不能相互转换，尽管都是占两个字节，但是含义截然不同

boolean类型的变量在JVM中具体是一个比特位还是一个字节不确定，取决于不同的JVM的实现

String a = "hello world"
a[1]不正确	a.charAt(1);正确
可以调用String内部的charAt方法可以查看某个下标位置的字符

Java final 除了表示常量之外，还有其他用法

VSCode 注释代码	ctr + /	(IDEA 也相同)

不同类型之间的相互赋值:如果a = b 如果b 的类型表示的数据范围比a大，那么这样的赋值可能发生截断
Java编译器会禁止这样的行为
如果想强行赋值,强制类型转换
强类型的编程语言 越不支持隐式类型转换(类型校验越严格越强)

和C语言类似,如果拿两个比较短的整形变量来运算，就会触发“整型提升”操作，目的是为了让硬件计算起来更方便高效

		
C语言常见的运行时错误往往是程序直接崩溃
java常见的运行错误是抛出一个异常(Exception)
java有很多不同种类的异常,不同种类的异常分别代表不同的含义

& java中既是逻辑与又是按位与
如果&两侧的操作数是boolean 就是逻辑与,此时没有短路求值的规则
如果两侧操作数是int/long之类的整数,行为就是按位与
|与&相同规则


